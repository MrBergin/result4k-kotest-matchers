name: Release
on:
  schedule:
    - cron: '0 0 * * SAT'
  workflow_dispatch:

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Calculate Release Version
        run: |
          NEXT_RELEASE=$(date "+%Y.%-m.%-d")
          LAST_RELEASE=$(git tag --sort=v:refname |grep "^20[^\-]*$" |tail -n 1)
          MAJOR_LAST_RELEASE=$(echo "${LAST_RELEASE}" | awk -v l=${#NEXT_RELEASE} '{ string=substr($0, 1, l); print string; }' )
          if [ "${MAJOR_LAST_RELEASE}" = "${NEXT_RELEASE}" ]; then
            MINOR_LAST_RELEASE=$(echo "${LAST_RELEASE}" | awk -v l=`expr ${#NEXT_RELEASE} + 2` '{ string=substr($0, l); print string; }' )
            NEXT_RELEASE=${MAJOR_LAST_RELEASE}.$((MINOR_LAST_RELEASE + 1))
          fi
          echo ::set-output name=VERSION::"${NEXT_RELEASE}"
        id: release-version

      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          cache-read-only: true

      - name: Publish Release Artifacts
        env:
          VERSION: ${{ steps.release-version.outputs.VERSION }}
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
          GPG_SIGNING_KEY_ID: ${{ secrets.GPG_SIGNING_KEY_ID }}
          GPG_SIGNING_PASSWORD: ${{ secrets.GPG_SIGNING_PASSWORD }}
        run: |
          ./gradlew check publishToSonatype closeAndReleaseSonatypeStagingRepository \
            -PreleaseVersion="$VERSION" \
            -PossrhUsername="$OSSRH_USERNAME" \
            -PossrhPassword="$OSSRH_PASSWORD" \
            -PsigningKey="$GPG_SIGNING_KEY" \
            -PsigningKeyId="$GPG_SIGNING_KEY_ID" \
            -PsigningPassword="$GPG_SIGNING_PASSWORD"

      - name: Create Tag And GitHub Release
        env:
          VERSION: ${{ steps.release-version.outputs.VERSION }}
        run: |
          curl -X POST --location "https://api.github.com/repos/mrbergin/result4k-kotest-matchers/releases" \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -d '{"tag_name":"'"$VERSION"'","target_commitish":"main","name":"'"$VERSION"'","draft":false,"prerelease":false,"generate_release_notes":true}'
